sound_pool pool_attack;
void key_attack(){
key_to_attack(key_pressed(KEY_SPACE));
use_skill();
}

void use_skill() {
if (key_pressed(KEY_1) and !die) {
h1.use_skill(1);
} else if (key_pressed(KEY_2) and !die) {
h1.use_skill(2);
} else if (key_pressed(KEY_3) and !die) {
h1.use_skill(3);
}
}

void key_to_attack(bool key){
if(key and !die){
pool_attack.play_stationary("fists.ogg",false);
for (int i=0;i<h.length;i++){
if (absolute(h[i].x-h1.x)<=2 and absolute(h[i].y-h1.y)<=2 and h[i].color != h1.color){
pool_attack.play_stationary("Hit"+random(1,5)+".ogg",false);
//rand_player_hit();
h[i].hp=h[i].hp-h1.phy_atk;
if(h[i].hp <= 0){
//kill announcer
if(h1.kill_count_timer.elapsed < 10000){
h1.kill_count_timer.restart();
} else{
h1.kill_count = 0;
h1.kill_count_timer.restart();
}
h1.kill_count += 1;
if(h1.kill_count == 1){
text_speak_interrupt(""+h[i].color+" team hero has been killed.");
} else if(h1.kill_count == 2){
text_speak_interrupt(" Double Kill.");
} else if(h1.kill_count == 3){
text_speak_interrupt(" Triple Kill.");
} else if(h1.kill_count == 4){
text_speak_interrupt(" Quad Kill.");
} else if(h1.kill_count == 5){
text_speak_interrupt(" Penta Kill.");
}

//exp giving
h1.exp += h[i].given_exp();
h1.check_lvl_up();
for(int j=0;j<h.length;j++){
if(h[j].color == h1.color){
h[j].exp += h[i].given_exp();
h[j].check_lvl_up();
}
}
}
send_reliable_msg(1, 0, "player", "attack", h1.name, h[i].name, i, h[i].hp);
}
}
for (int i=0;i<tw.length;i++){
if (absolute(tw[i].x-h1.x)<=2 and absolute(tw[i].y-h1.y)<=2 and tw[i].color != h1.color){
pool_attack.play_stationary("Hit"+random(1,5)+".ogg",false);
//rand_player_hit();
tower_destroy(i);
send_reliable_msg(1, 0, "player", "attack", h1.name, "tower", i, tw[i].hp);
}
}
if(h1.color=="blue"){
for (int i=0;i<c_red.length;i++){
if (absolute(c_red[i].x-h1.x)<=2 and absolute(c_red[i].y-h1.y)<=2){
pool_creep.play_stationary("Attack_creep"+random(1,3)+".ogg",false);
//rand_player_attack_creep();
c_red[i].hp = c_red[i].hp - h1.phy_atk;
if(c_red[i].hp<=0){
h1.money = h1.money + 50;
h1.exp += 100;
h1.check_lvl_up();
for(int j=0;j<h.length;j++){
if(h[j].color == h1.color and absolute(c_red[i].x-h[j].x) <= 10 and absolute(c_red[i].y-h[j].y) <= 10){
h[j].exp += 100;
h[j].check_lvl_up();
}
}
pool_creep.play_stationary("creep_die.ogg",false);
//c_red[i].creep_die_sound.stop();
//c_red[i].creep_die_sound.play();
c_red[i].creep_dead();
}
send_reliable_msg(1, 0, "player", "attack", h1.name, "red creep", i, c_red[i].hp);
}
}
}
if(h1.color=="red"){
for (int i=0;i<c_blue.length;i++){
if (absolute(c_blue[i].x-h1.x)<=2 and absolute(c_blue[i].y-h1.y)<=2){
pool_creep.play_stationary("Attack_creep"+random(1,3)+".ogg",false);
//rand_player_attack_creep();
c_blue[i].hp = c_blue[i].hp - h1.phy_atk;
if(c_blue[i].hp<=0){
h1.money = h1.money + 50;
h1.exp += 100;
h1.check_lvl_up();
for(int j=0;j<h.length;j++){
if(h[j].color == h1.color and absolute(c_blue[i].x-h[j].x) <= 10 and absolute(c_blue[i].y-h[j].y) <= 10){
h[j].exp += 100;
h[j].check_lvl_up();
}
}
pool_creep.play_stationary("creep_die.ogg",false);
//c_blue[i].creep_die_sound.stop();
//c_blue[i].creep_die_sound.play();
c_blue[i].creep_dead();
}
send_reliable_msg(1, 0, "player", "attack", h1.name, "blue creep", i, c_blue[i].hp);
}
}
}
for (int i=0;i<mon.length;i++){
if (absolute(mon[i].x-h1.x) <= 2 and absolute(mon[i].y-h1.y) <= 2 and mon[i].active){
pool_attack.play_stationary("attack_monster"+random(1,2)+".ogg",false);
//rand_player_attack_monster();
mon[i].hp = mon[i].hp - h1.phy_atk;
send_reliable_msg(1, 0, "player", "attack", h1.name, "monster", i, mon[i].hp);
}
}
}
}